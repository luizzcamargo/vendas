{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "083ea948-33f9-4d38-9928-40ac37bd7fb9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "635d020a-9282-4e34-9b6e-ca07e9973d7b",
   "metadata": {},
   "outputs": [
    {
     "ename": "OSError",
     "evalue": "Address 'http://127.0.0.1:8050' already in use.\n    Try passing a different port to run.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mOSError\u001b[0m                                   Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 154\u001b[0m\n\u001b[0;32m    151\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fig\n\u001b[0;32m    153\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m--> 154\u001b[0m     app\u001b[38;5;241m.\u001b[39mrun(debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\dash\\dash.py:2268\u001b[0m, in \u001b[0;36mDash.run\u001b[1;34m(self, host, port, proxy, debug, jupyter_mode, jupyter_width, jupyter_height, jupyter_server_url, dev_tools_ui, dev_tools_props_check, dev_tools_serve_dev_bundles, dev_tools_hot_reload, dev_tools_hot_reload_interval, dev_tools_hot_reload_watch_interval, dev_tools_hot_reload_max_retry, dev_tools_silence_routes_logging, dev_tools_disable_version_check, dev_tools_prune_errors, **flask_run_options)\u001b[0m\n\u001b[0;32m   2265\u001b[0m             extra_files\u001b[38;5;241m.\u001b[39mappend(path)\n\u001b[0;32m   2267\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m jupyter_dash\u001b[38;5;241m.\u001b[39mactive:\n\u001b[1;32m-> 2268\u001b[0m     jupyter_dash\u001b[38;5;241m.\u001b[39mrun_app(\n\u001b[0;32m   2269\u001b[0m         \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   2270\u001b[0m         mode\u001b[38;5;241m=\u001b[39mjupyter_mode,\n\u001b[0;32m   2271\u001b[0m         width\u001b[38;5;241m=\u001b[39mjupyter_width,\n\u001b[0;32m   2272\u001b[0m         height\u001b[38;5;241m=\u001b[39mjupyter_height,\n\u001b[0;32m   2273\u001b[0m         host\u001b[38;5;241m=\u001b[39mhost,\n\u001b[0;32m   2274\u001b[0m         port\u001b[38;5;241m=\u001b[39mport,\n\u001b[0;32m   2275\u001b[0m         server_url\u001b[38;5;241m=\u001b[39mjupyter_server_url,\n\u001b[0;32m   2276\u001b[0m     )\n\u001b[0;32m   2277\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   2278\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mserver\u001b[38;5;241m.\u001b[39mrun(host\u001b[38;5;241m=\u001b[39mhost, port\u001b[38;5;241m=\u001b[39mport, debug\u001b[38;5;241m=\u001b[39mdebug, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mflask_run_options)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\dash\\_jupyter.py:408\u001b[0m, in \u001b[0;36mJupyterDash.run_app\u001b[1;34m(self, app, mode, width, height, host, port, server_url)\u001b[0m\n\u001b[0;32m    406\u001b[0m     display(HTML(msg))\n\u001b[0;32m    407\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 408\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m final_error\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\dash\\_jupyter.py:395\u001b[0m, in \u001b[0;36mJupyterDash.run_app\u001b[1;34m(self, app, mode, width, height, host, port, server_url)\u001b[0m\n\u001b[0;32m    392\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m err\n\u001b[0;32m    394\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 395\u001b[0m     wait_for_app()\n\u001b[0;32m    397\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39min_colab:\n\u001b[0;32m    398\u001b[0m         JupyterDash\u001b[38;5;241m.\u001b[39m_display_in_colab(dashboard_url, port, mode, width, height)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\retrying.py:56\u001b[0m, in \u001b[0;36mretry.<locals>.wrap.<locals>.wrapped_f\u001b[1;34m(*args, **kw)\u001b[0m\n\u001b[0;32m     54\u001b[0m \u001b[38;5;129m@six\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(f)\n\u001b[0;32m     55\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwrapped_f\u001b[39m(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkw):\n\u001b[1;32m---> 56\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m Retrying(\u001b[38;5;241m*\u001b[39mdargs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mdkw)\u001b[38;5;241m.\u001b[39mcall(f, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkw)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\retrying.py:266\u001b[0m, in \u001b[0;36mRetrying.call\u001b[1;34m(self, fn, *args, **kwargs)\u001b[0m\n\u001b[0;32m    263\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstop(attempt_number, delay_since_first_attempt_ms):\n\u001b[0;32m    264\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_wrap_exception \u001b[38;5;129;01mand\u001b[39;00m attempt\u001b[38;5;241m.\u001b[39mhas_exception:\n\u001b[0;32m    265\u001b[0m         \u001b[38;5;66;03m# get() on an attempt with an exception should cause it to be raised, but raise just in case\u001b[39;00m\n\u001b[1;32m--> 266\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m attempt\u001b[38;5;241m.\u001b[39mget()\n\u001b[0;32m    267\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    268\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m RetryError(attempt)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\retrying.py:301\u001b[0m, in \u001b[0;36mAttempt.get\u001b[1;34m(self, wrap_exception)\u001b[0m\n\u001b[0;32m    299\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m RetryError(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m    300\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 301\u001b[0m         six\u001b[38;5;241m.\u001b[39mreraise(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalue[\u001b[38;5;241m0\u001b[39m], \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalue[\u001b[38;5;241m1\u001b[39m], \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalue[\u001b[38;5;241m2\u001b[39m])\n\u001b[0;32m    302\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    303\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalue\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\six.py:719\u001b[0m, in \u001b[0;36mreraise\u001b[1;34m(tp, value, tb)\u001b[0m\n\u001b[0;32m    717\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m value\u001b[38;5;241m.\u001b[39m__traceback__ \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m tb:\n\u001b[0;32m    718\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m value\u001b[38;5;241m.\u001b[39mwith_traceback(tb)\n\u001b[1;32m--> 719\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m value\n\u001b[0;32m    720\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[0;32m    721\u001b[0m     value \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\retrying.py:251\u001b[0m, in \u001b[0;36mRetrying.call\u001b[1;34m(self, fn, *args, **kwargs)\u001b[0m\n\u001b[0;32m    248\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_before_attempts(attempt_number)\n\u001b[0;32m    250\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 251\u001b[0m     attempt \u001b[38;5;241m=\u001b[39m Attempt(fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs), attempt_number, \u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[0;32m    252\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m:\n\u001b[0;32m    253\u001b[0m     tb \u001b[38;5;241m=\u001b[39m sys\u001b[38;5;241m.\u001b[39mexc_info()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\dash\\_jupyter.py:386\u001b[0m, in \u001b[0;36mJupyterDash.run_app.<locals>.wait_for_app\u001b[1;34m()\u001b[0m\n\u001b[0;32m    384\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m res \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAlive\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m    385\u001b[0m         url \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhttp://\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mhost\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m:\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mport\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m--> 386\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mOSError\u001b[39;00m(\n\u001b[0;32m    387\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAddress \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00murl\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m already in use.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    388\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m    Try passing a different port to run.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    389\u001b[0m         )\n\u001b[0;32m    390\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m requests\u001b[38;5;241m.\u001b[39mConnectionError \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[0;32m    391\u001b[0m     _get_error()\n",
      "\u001b[1;31mOSError\u001b[0m: Address 'http://127.0.0.1:8050' already in use.\n    Try passing a different port to run."
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from dash import Dash, dcc, html\n",
    "from dash.dependencies import Input, Output\n",
    "\n",
    "vendas_2020 = pd.read_excel(\"Base Vendas - 2020.xlsx\")\n",
    "vendas_2021 = pd.read_excel(\"Base Vendas - 2021.xlsx\")\n",
    "vendas_2022 = pd.read_excel(\"Base Vendas - 2022.xlsx\")\n",
    "clientes = pd.read_excel(\"Cadastro Clientes.xlsx\")\n",
    "lojas = pd.read_excel(\"Cadastro Lojas.xlsx\")\n",
    "produtos = pd.read_excel(\"Cadastro Produtos.xlsx\")\n",
    "vendas = pd.concat([vendas_2020, vendas_2021, vendas_2022], ignore_index=True)\n",
    "clientes[\"Nome Completo\"] = clientes[\"Primeiro Nome\"].str.strip() + \" \" + clientes[\"Sobrenome\"].str.strip()\n",
    "vendas = vendas.merge(clientes[[\"ID Cliente\", \"Nome Completo\"]], on=\"ID Cliente\", how=\"left\")\n",
    "vendas = vendas.merge(produtos, on=\"SKU\", how=\"left\")\n",
    "vendas = vendas.merge(lojas, on=\"ID Loja\", how=\"left\")\n",
    "vendas['Data da Venda'] = pd.to_datetime(vendas['Data da Venda'])\n",
    "vendas['Ano'] = vendas['Data da Venda'].dt.year\n",
    "vendas['Mês'] = vendas['Data da Venda'].dt.month_name()\n",
    "\n",
    "app = Dash(__name__)\n",
    "\n",
    "server = app.server \n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Análise de Vendas - Dashboard Interativo\", style={'textAlign': 'center'}),\n",
    "\n",
    "    html.Div([\n",
    "        dcc.Dropdown(\n",
    "            id='ano-filtro',\n",
    "            options=[{'label': str(ano), 'value': ano} for ano in sorted(vendas['Ano'].unique())],\n",
    "            multi=True,\n",
    "            placeholder=\"Filtrar por ano...\"\n",
    "        ),\n",
    "        dcc.Dropdown(\n",
    "            id='produto-filtro',\n",
    "            options=[{'label': p, 'value': p} for p in sorted(vendas['Produto'].unique())],\n",
    "            multi=True,\n",
    "            placeholder=\"Filtrar por produto...\"\n",
    "        ),\n",
    "        dcc.Dropdown(\n",
    "            id='loja-filtro',\n",
    "            options=[{'label': l, 'value': l} for l in sorted(vendas['Nome da Loja'].unique())],\n",
    "            multi=True,\n",
    "            placeholder=\"Filtrar por loja...\"\n",
    "        ),\n",
    "        dcc.Dropdown(\n",
    "            id='cliente-filtro',\n",
    "            options=[{'label': c, 'value': c} for c in sorted(vendas['Nome Completo'].unique())],\n",
    "            multi=True,\n",
    "            placeholder=\"Filtrar por cliente...\"\n",
    "        ),\n",
    "        dcc.Dropdown(\n",
    "            id='tipo-produto-filtro',\n",
    "            options=[{'label': t, 'value': t} for t in sorted(vendas['Tipo do Produto'].unique())],\n",
    "            multi=True,\n",
    "            placeholder=\"Filtrar por tipo de produto...\"\n",
    "        ),\n",
    "        dcc.Dropdown(\n",
    "            id='marca-filtro',\n",
    "            options=[{'label': m, 'value': m} for m in sorted(vendas['Marca'].unique())],\n",
    "            multi=True,\n",
    "            placeholder=\"Filtrar por marca de produto...\"\n",
    "        )\n",
    "    ], style={'display': 'grid', 'gridTemplateColumns': '1fr 1fr 1fr', 'gap': '10px', 'margin': '20px'}),\n",
    "\n",
    "    dcc.Graph(id='vendas-ano'),\n",
    "    dcc.Graph(id='vendas-cliente'),\n",
    "    dcc.Graph(id='vendas-produto'),\n",
    "    dcc.Graph(id='vendas-loja'),\n",
    "    dcc.Graph(id='vendas-tipo-produto'),\n",
    "    dcc.Graph(id='vendas-mensais'),\n",
    "\n",
    "    html.Hr(),\n",
    "    html.H2(\"Análise por Tipo e Marca\"),\n",
    "    html.Div([\n",
    "        dcc.Dropdown(\n",
    "            id='tipo-produto-dropdown',\n",
    "            options=[{'label': tipo, 'value': tipo} for tipo in sorted(vendas['Tipo do Produto'].unique())],\n",
    "            placeholder='Selecione o Tipo de Produto'\n",
    "        ),\n",
    "        dcc.Dropdown(\n",
    "            id='marca-dropdown',\n",
    "            placeholder='Selecione a Marca',\n",
    "            multi=True\n",
    "        )\n",
    "    ], style={'width': '50%', 'margin': 'auto'}),\n",
    "    dcc.Graph(id='grafico-vendas-marca')\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    Output('marca-dropdown', 'options'),\n",
    "    Input('tipo-produto-dropdown', 'value')\n",
    ")\n",
    "def atualizar_marcas(tipo_produto):\n",
    "    if tipo_produto:\n",
    "        marcas = vendas[vendas['Tipo do Produto'] == tipo_produto]['Marca'].unique()\n",
    "        return [{'label': m, 'value': m} for m in sorted(marcas)]\n",
    "    return []\n",
    "\n",
    "@app.callback(\n",
    "    [Output('vendas-ano', 'figure'),\n",
    "     Output('vendas-cliente', 'figure'),\n",
    "     Output('vendas-produto', 'figure'),\n",
    "     Output('vendas-loja', 'figure'),\n",
    "     Output('vendas-tipo-produto', 'figure'),\n",
    "     Output('vendas-mensais', 'figure')],\n",
    "    [Input('ano-filtro', 'value'),\n",
    "     Input('produto-filtro', 'value'),\n",
    "     Input('loja-filtro', 'value'),\n",
    "     Input('cliente-filtro', 'value'),\n",
    "     Input('tipo-produto-filtro', 'value'),\n",
    "     Input('marca-filtro', 'value')]\n",
    ")\n",
    "def update_graphs(anos, produtos, lojas, clientes, tipos, marcas):\n",
    "    df = vendas.copy()\n",
    "    if anos:\n",
    "        df = df[df['Ano'].isin(anos)]\n",
    "    if produtos:\n",
    "        df = df[df['Produto'].isin(produtos)]\n",
    "    if lojas:\n",
    "        df = df[df['Nome da Loja'].isin(lojas)]\n",
    "    if clientes:\n",
    "        df = df[df['Nome Completo'].isin(clientes)]\n",
    "    if tipos:\n",
    "        df = df[df['Tipo do Produto'].isin(tipos)]\n",
    "    if marcas:\n",
    "        df = df[df['Marca'].isin(marcas)]\n",
    "\n",
    "    fig1 = px.bar(df.groupby('Ano')['Qtd Vendida'].sum().reset_index(), x='Ano', y='Qtd Vendida', title='Vendas por Ano')\n",
    "    top_clientes = df.groupby('Nome Completo')['Qtd Vendida'].sum().nlargest(10).reset_index()\n",
    "    fig2 = px.pie(top_clientes, names='Nome Completo', values='Qtd Vendida', title='Top 10 Clientes')\n",
    "    vendas_prod = df.groupby('Produto')['Qtd Vendida'].sum().nlargest(15).reset_index()\n",
    "    fig3 = px.bar(vendas_prod, y='Produto', x='Qtd Vendida', orientation='h', title='Top 15 Produtos')\n",
    "    fig4 = px.bar(df.groupby('Nome da Loja')['Qtd Vendida'].sum().reset_index(), x='Nome da Loja', y='Qtd Vendida', title='Vendas por Loja')\n",
    "    fig5 = px.treemap(df, path=['Tipo do Produto', 'Marca', 'Produto'], values='Qtd Vendida', title='Vendas por Tipo e Marca')\n",
    "    vendas_mensais = df.groupby(['Ano', 'Mês'])['Qtd Vendida'].sum().reset_index()\n",
    "    meses_ordem = ['January', 'February', 'March', 'April', 'May', 'June','July', 'August', 'September', 'October', 'November', 'December']\n",
    "    vendas_mensais['Mês'] = pd.Categorical(vendas_mensais['Mês'], categories=meses_ordem, ordered=True)\n",
    "    vendas_mensais = vendas_mensais.sort_values(['Ano', 'Mês'])\n",
    "    fig6 = px.imshow(pd.pivot_table(vendas_mensais, values='Qtd Vendida', index='Ano', columns='Mês'),\n",
    "                     title='Heatmap de Vendas Mensais', labels=dict(x=\"Mês\", y=\"Ano\", color=\"Vendas\"))\n",
    "    return fig1, fig2, fig3, fig4, fig5, fig6\n",
    "\n",
    "@app.callback(\n",
    "    Output('grafico-vendas-marca', 'figure'),\n",
    "    [Input('tipo-produto-dropdown', 'value'),\n",
    "     Input('marca-dropdown', 'value')]\n",
    ")\n",
    "def update_grafico_marca(tipo, marcas):\n",
    "    df = vendas.copy()\n",
    "    if tipo:\n",
    "        df = df[df['Tipo do Produto'] == tipo]\n",
    "    if marcas:\n",
    "        df = df[df['Marca'].isin(marcas)]\n",
    "    df_grouped = df.groupby('Marca')['Qtd Vendida'].sum().reset_index()\n",
    "    fig = px.bar(df_grouped, x='Marca', y='Qtd Vendida', title=f'Vendas por Marca ({tipo})')\n",
    "    return fig\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
